{"version":3,"file":"static/js/513.485223a4.chunk.js","mappings":"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","sources":["VISOS/perception/audio/AudioToText.js","modules/frenchVocabularyQuiz.js"],"sourcesContent":["export default class AudioToText {\n    constructor() {\n        this.recognition = null;\n        this.isListening = false;\n    }\n\n    initializeRecognizer() {\n        if (!('webkitSpeechRecognition' in window)) {\n            console.error('Web Speech API not supported in this browser.');\n            return Promise.reject('Web Speech API not supported');\n        }\n\n        this.recognition = new window.webkitSpeechRecognition();\n        this.recognition.continuous = true;  // Continuous listening mode\n        this.recognition.interimResults = false;  // Final results only\n        this.recognition.lang = 'en-US';  // Set language\n\n        return Promise.resolve();\n    }\n\n    startContinuousRecognition(onRecognizedCallback) {\n        if (this.isListening) {\n            console.warn('Recognition is already running.');\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.initializeRecognizer().then(() => {\n                this.recognition.onresult = (event) => {\n                    const transcript = Array.from(event.results)\n                        .map(result => result[0].transcript)\n                        .join('');\n                    console.log(`RECOGNIZED: ${transcript.trim()}`);\n                    onRecognizedCallback(transcript.trim());\n                };\n\n                this.recognition.onerror = (event) => {\n                    console.error('Speech recognition error:', event.error);\n                    // Handle specific error types\n                    if (event.error === 'no-speech') {\n                        console.warn('No speech detected, resuming listening...');\n                        setTimeout(() => {\n                            this.recognition.start(); // Restart recognition after a short delay\n                        }, 1000); // Adjust delay as necessary\n                    } else {\n                        reject(event.error);\n                    }\n                };\n\n                this.recognition.onend = () => {\n                    console.log('Speech recognition ended, restarting...');\n                    if (this.isListening) {\n                        this.recognition.start(); // Restart if recognition stops\n                    }\n                };\n\n                this.isListening = true;\n                this.recognition.start();\n                resolve();\n            }).catch(error => {\n                console.error('Error initializing speech recognition:', error);\n                reject(error);\n            });\n        });\n    }\n\n    stopRecognition() {\n        if (this.recognition) {\n            this.isListening = false;\n            this.recognition.stop();\n            console.log('Recognition stopped.');\n        }\n    }\n}","import ReactDOMClient from 'react-dom/client';\nimport React, { useEffect } from 'react';\nimport AudioToText from './../VISOS/perception/audio/AudioToText';\nimport VoiceManager from './../VISOS/action/verbalizers/VoiceManager';\n\nlet voiceManager = null;\nlet audioToText = null;\nlet currentQuestionIndex = 0;\nlet correctAnswers = 0;\nlet root = null;\n\nlet questions = [\n    { french: \"Bonjour\", english: \"Hello\" },\n    { french: \"Merci\", english: \"Thank you\" },\n    { french: \"Chat\", english: \"Cat\" },\n    { french: \"Chien\", english: \"Dog\" },\n    { french: \"Maison\", english: \"House\" },\n];\n\n// Function to set the voice to French and ensure it's available\nconst setFrenchVoice = () => {\n    return new Promise((resolve) => {\n        console.log(\"Attempting to set the voice to French...\");\n        const checkVoices = () => {\n            const frenchVoice = voiceManager.getVoices().find(voice => voice.name.includes(\"Google français\"));\n            if (frenchVoice) {\n                voiceManager.setVoice(frenchVoice.name);\n                console.log(`French voice set: ${frenchVoice.name}`);\n                resolve();\n            } else {\n                console.log(\"French voice not found, retrying...\");\n                setTimeout(checkVoices, 500);  // Retry until the voice is available\n            }\n        };\n        checkVoices();\n    });\n};\n\n// Function to ask the next question\nconst askNextQuestion = () => {\n    if (currentQuestionIndex < questions.length) {\n        const currentQuestion = questions[currentQuestionIndex];\n        const questionText = `Que veut dire ${currentQuestion.french} en anglais ?`;\n        console.log(`Asking question: ${questionText}`);\n        voiceManager.enqueueText(questionText);\n\n        // Wait for the question to be spoken before starting to listen\n        voiceManager.synthesizeSpeech(questionText).then(() => {\n            console.log(\"Question spoken. Starting to listen for an answer...\");\n            audioToText.startContinuousRecognition((transcribedText) => {\n                processAnswer(transcribedText);\n            });\n        });\n    } else {\n        endQuiz();\n    }\n};\n\n// Function to process the user's answer\nconst processAnswer = (transcribedText) => {\n    const currentQuestion = questions[currentQuestionIndex];\n    const userAnswer = transcribedText.trim().toLowerCase();\n    const correctAnswer = currentQuestion.english.toLowerCase();\n\n    console.log(`User answered: ${userAnswer}`);\n\n    if (userAnswer === correctAnswer) {\n        correctAnswers++;\n        console.log(\"Correct answer!\");\n        voiceManager.enqueueText(\"Correct !\");\n    } else {\n        console.log(`Incorrect answer. The correct answer is: ${currentQuestion.english}`);\n        voiceManager.enqueueText(`Incorrect. La bonne réponse est ${currentQuestion.english}`);\n    }\n\n    currentQuestionIndex++;\n    askNextQuestion();  // Move to the next question\n};\n\n// Function to end the quiz\nconst endQuiz = () => {\n    console.log(`Quiz ended. You got ${correctAnswers} out of ${questions.length} correct.`);\n    voiceManager.enqueueText(`Vous avez terminé le quiz ! Vous avez obtenu ${correctAnswers} bonnes réponses sur ${questions.length}.`);\n};\n\n// React component for FrenchQuizApp\nconst FrenchQuizApp = () => {\n    useEffect(() => {\n        console.log(\"Starting French quiz...\");\n        audioToText.startContinuousRecognition((text) => askNextQuestion());\n\n        return () => {\n            console.log(\"Stopping recognition...\");\n            audioToText.stopRecognition();  // Clean up when component unmounts\n        };\n    }, []);\n\n    return null; // No need for a visible UI component\n};\n\n// Start the quiz\nexport const start = (animationManager) => {\n    console.log(\"Initializing French Vocabulary Quiz...\");\n    voiceManager = VoiceManager.getInstance(animationManager);\n    audioToText = new AudioToText('webspeech');  // Initialize AudioToText\n    currentQuestionIndex = 0;\n    correctAnswers = 0;\n\n    setFrenchVoice().then(() => {\n        console.log(\"Starting the quiz with the first question...\");\n        voiceManager.enqueueText(\"Commençons le quiz de vocabulaire en français !\");\n        askNextQuestion();  // Ask the first question\n    });\n};\n\n// Stop the quiz\nexport const stop = () => {\n    console.log(\"Stopping French Vocabulary Quiz...\");\n    if (audioToText) {\n        audioToText.stopRecognition();\n    }\n    if (voiceManager) {\n        voiceManager.stopSpeech();\n    }\n    console.log(\"Quiz stopped.\");\n};"],"names":["AudioToText","constructor","this","recognition","isListening","initializeRecognizer","window","webkitSpeechRecognition","continuous","interimResults","lang","Promise","resolve","console","error","reject","startContinuousRecognition","onRecognizedCallback","then","onresult","event","transcript","Array","from","results","map","result","join","log","concat","trim","onerror","warn","setTimeout","start","onend","catch","stopRecognition","stop","voiceManager","audioToText","currentQuestionIndex","correctAnswers","questions","french","english","askNextQuestion","length","questionText","enqueueText","synthesizeSpeech","transcribedText","processAnswer","endQuiz","currentQuestion","userAnswer","toLowerCase","correctAnswer","animationManager","VoiceManager","getInstance","checkVoices","frenchVoice","getVoices","find","voice","name","includes","setVoice","stopSpeech"],"sourceRoot":""}