{"version":3,"file":"static/js/820.96345a7a.chunk.js","mappings":"4LAGA,MAmEA,EAnEsBA,KACpB,MAAMC,GAAWC,EAAAA,EAAAA,UACXC,GAAYD,EAAAA,EAAAA,WAGlBE,EAAAA,EAAAA,YAAU,KACWC,WACjB,IACE,MAAMC,EAAYC,0BACZC,EAAAA,GAAaC,iBAAiBC,YAAYJ,SAC1CE,EAAAA,GAAaG,kBAAkBD,YAAYJ,SAC3CE,EAAAA,GAAaI,mBAAmBF,YAAYJ,SAC5CE,EAAAA,GAAaK,kBAAkBH,YAAYJ,GAEjDQ,GACF,CAAE,MAAOC,GACPC,QAAQD,MAAM,wBAAyBA,EACzC,GAGFE,EAAY,GACX,IAGH,MAAMH,EAAaA,KACjBI,UAAUC,aACPC,aAAa,CAAEC,MAAO,CAAC,IACvBC,MAAMC,IACLtB,EAASuB,QAAQC,UAAYF,CAAM,IAEpCG,OAAOC,GAAQX,QAAQD,MAAM,0BAA2BY,IAAK,EAI5DC,EAAavB,UAEjB,MAAMwB,QAAmBrB,EAAAA,EAAuBP,EAASuB,QAAS,IAAIhB,EAAAA,IAAmCsB,oBAAoBC,sBAGvHC,EAAS7B,EAAUqB,QACnBS,EAAc,CAAEC,MAAOjC,EAASuB,QAAQU,MAAOC,OAAQlC,EAASuB,QAAQW,QAE9E3B,EAAAA,GAAwBwB,EAAQC,GAChC,MAAMG,EAAoB5B,EAAAA,GAAsBqB,EAAYI,GAE5DD,EAAOK,WAAW,MAAMC,UAAU,EAAG,EAAGN,EAAOE,MAAOF,EAAOG,QAC7D3B,EAAAA,GAAAA,eAA4BwB,EAAQI,GACpC5B,EAAAA,GAAAA,kBAA+BwB,EAAQI,GACvC5B,EAAAA,GAAAA,oBAAiCwB,EAAQI,EAAkB,EAW7D,OAPAhC,EAAAA,EAAAA,YAAU,KAAO,IAADmC,EACE,QAAhBA,EAAAtC,EAASuB,eAAO,IAAAe,GAAhBA,EAAkBC,iBAAiB,QAAQ,KACzC,MAAMC,EAAWC,YAAYd,EAAY,KACzC,MAAO,IAAMe,cAAcF,EAAS,GACpC,GACD,KAGDG,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,SAAU,YAAaC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SAAOC,IAAKhD,EAAUiD,UAAQ,EAACC,OAAK,EAACjB,MAAM,MAAMC,OAAO,MAAMU,MAAO,CAAEC,SAAU,eACjFE,EAAAA,EAAAA,KAAA,UAAQC,IAAK9C,EAAW0C,MAAO,CAAEC,SAAU,WAAYM,KAAM,EAAGC,IAAK,OACjE,EC9DV,IAAIC,EAAO,KAEJ,MAAMC,EAAQA,CAACC,EAAkBC,EAAUC,KAC3CA,GAAiBA,EAAalC,SAK9B8B,IACHA,EAAOK,EAAAA,WAA0BD,EAAalC,UAGhD8B,EAAKM,QAAOZ,EAAAA,EAAAA,KAAChD,EAAa,CAACwD,iBAAkBA,EAAkBC,SAAUA,MARvEzC,QAAQD,MAAM,iFAQsE,EAG3E8C,EAAOA,KACdP,IACFA,EAAKQ,UACLR,EAAO,KACT,C","sources":["components/FaceDetection.jsx","modules/faceDetectionApp.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as faceapi from 'face-api.js';\n\nconst FaceDetection = () => {\n  const videoRef = useRef(); // Reference to the video element\n  const canvasRef = useRef(); // Reference to the canvas element\n\n  // Function to load Face API models\n  useEffect(() => {\n    const loadModels = async () => {\n      try {\n        const MODEL_URL = process.env.PUBLIC_URL + '/models';\n        await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);\n        await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);\n        await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);\n        await faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL);\n\n        startVideo(); // Start webcam after models are loaded\n      } catch (error) {\n        console.error('Error loading models:', error);\n      }\n    };\n\n    loadModels();\n  }, []);\n\n  // Function to start the webcam stream\n  const startVideo = () => {\n    navigator.mediaDevices\n      .getUserMedia({ video: {} })\n      .then((stream) => {\n        videoRef.current.srcObject = stream; // Attach the webcam stream to the video element\n      })\n      .catch((err) => console.error('Error accessing webcam:', err));\n  };\n\n  // Function to detect faces and draw bounding boxes\n  const detectFace = async () => {\n    // Detect faces with TinyFaceDetector\n    const detections = await faceapi.detectAllFaces(videoRef.current, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\n\n    // Clear the canvas before drawing\n    const canvas = canvasRef.current;\n    const displaySize = { width: videoRef.current.width, height: videoRef.current.height };\n\n    faceapi.matchDimensions(canvas, displaySize); // Match canvas size with video element\n    const resizedDetections = faceapi.resizeResults(detections, displaySize); // Resize detections to match video size\n\n    canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height); // Clear previous drawings\n    faceapi.draw.drawDetections(canvas, resizedDetections); // Draw bounding boxes\n    faceapi.draw.drawFaceLandmarks(canvas, resizedDetections); // Draw face landmarks (optional)\n    faceapi.draw.drawFaceExpressions(canvas, resizedDetections); // Draw expressions (optional)\n  };\n\n  // Detect faces every 100 milliseconds\n  useEffect(() => {\n    videoRef.current?.addEventListener('play', () => {\n      const interval = setInterval(detectFace, 100); // Run face detection periodically\n      return () => clearInterval(interval); // Cleanup interval on unmount\n    });\n  }, []);\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <video ref={videoRef} autoPlay muted width=\"720\" height=\"560\" style={{ position: 'relative' }} />\n      <canvas ref={canvasRef} style={{ position: 'absolute', left: 0, top: 0 }} />\n    </div>\n  );\n};\n\nexport default FaceDetection;","import ReactDOMClient from 'react-dom/client';\nimport React from 'react';\nimport FaceDetection from '../components/FaceDetection';\n\nlet root = null;\n\nexport const start = (animationManager, settings, containerRef) => {\n  if (!containerRef || !containerRef.current) {\n    console.error('Container reference not provided or invalid. Unable to start FaceDetectionApp.');\n    return; // Exit the function gracefully\n  }\n\n  if (!root) {\n    root = ReactDOMClient.createRoot(containerRef.current);\n  }\n\n  root.render(<FaceDetection animationManager={animationManager} settings={settings} />);\n};\n\nexport const stop = () => {\n  if (root) {\n    root.unmount(); // Unmount the component using the root\n    root = null; // Reset root to null\n  }\n};"],"names":["FaceDetection","videoRef","useRef","canvasRef","useEffect","async","MODEL_URL","process","faceapi","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceRecognitionNet","faceExpressionNet","startVideo","error","console","loadModels","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","catch","err","detectFace","detections","withFaceLandmarks","withFaceExpressions","canvas","displaySize","width","height","resizedDetections","getContext","clearRect","_videoRef$current","addEventListener","interval","setInterval","clearInterval","_jsxs","style","position","children","_jsx","ref","autoPlay","muted","left","top","root","start","animationManager","settings","containerRef","ReactDOMClient","render","stop","unmount"],"sourceRoot":""}