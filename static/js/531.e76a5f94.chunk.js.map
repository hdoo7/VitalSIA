{"version":3,"file":"static/js/531.e76a5f94.chunk.js","mappings":"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","sources":["VISOS/perception/video/VideoToEmotion.js","hooks/useEmo.js","components/DraggableVideoBox.jsx","components/EmotionRadarChart.jsx","components/EmotionDetection.jsx","modules/faceDetectionApp.js"],"sourcesContent":["import * as faceapi from 'face-api.js';\n\nexport default class VideoToEmotion {\n    constructor() {\n        this.videoElement = null;\n        this.isProcessing = false;\n        this.intervalId = null;\n    }\n\n    // Initialize the video element for processing\n    initVideo(videoElement) {\n        this.videoElement = videoElement;\n    }\n\n    // Load face-api.js models before detection\n    async loadModels() {\n        const MODEL_URL = process.env.PUBLIC_URL + '/models';\n        try {\n            await faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL);\n            await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);\n            await faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL);\n            await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);\n            console.log('Models loaded successfully');\n        } catch (error) {\n            console.error('Error loading models:', error);\n            throw new Error('Failed to load face-api models');\n        }\n    }\n\n    // Start the webcam stream and setup face detection\n    async startVideoStream() {\n        try {\n            if (!this.videoElement) throw new Error(\"Video element not initialized.\");\n\n            // Ensure models are loaded before starting the video stream\n            await this.loadModels();\n\n            const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n            this.videoElement.srcObject = stream;  // Attach webcam stream to video element\n        } catch (error) {\n            console.error(\"Error accessing webcam:\", error);\n        }\n    }\n\n    // Start detecting emotions from the video feed\n    startContinuousDetection(onEmotionDetectedCallback) {\n        if (this.isProcessing) {\n            console.warn(\"Emotion detection is already running.\");\n            return;\n        }\n\n        this.isProcessing = true;\n\n        const detectEmotions = async () => {\n            if (!this.videoElement) return;\n\n            const detections = await faceapi\n                .detectAllFaces(this.videoElement, new faceapi.TinyFaceDetectorOptions())\n                .withFaceLandmarks()\n                .withFaceExpressions();\n\n            if (detections.length > 0) {\n                const emotions = detections[0].expressions;\n                onEmotionDetectedCallback(emotions);\n            }\n        };\n\n        this.intervalId = setInterval(detectEmotions, 100); // Detect emotions every 100ms\n    }\n\n    // Stop emotion detection\n    stopDetection() {\n        if (this.isProcessing) {\n            clearInterval(this.intervalId);\n            this.isProcessing = false;\n        }\n    }\n\n    // Stop the video stream when unmounting\n    stopVideoStream() {\n        if (this.videoElement && this.videoElement.srcObject) {\n            const stream = this.videoElement.srcObject;\n            stream.getTracks().forEach(track => track.stop());\n            this.videoElement.srcObject = null;\n        }\n    }\n}","import { useState, useCallback, useRef } from 'react';\nimport VideoToEmotion from '../VISOS/perception/video/VideoToEmotion';  // Import Video Sensor\n\nconst useEmo = () => {\n    const [emotionState, setEmotionState] = useState({\n        detectedEmotion: null,\n        emotionIntensities: {\n            joy: 0,\n            anger: 0,\n            disgust: 0,\n            fear: 0,\n            sadness: 0,\n            surprise: 0\n        },\n        status: 'idle',  // Possible statuses: 'idle', 'detecting', 'stopped'\n    });\n\n    const videoToEmotion = useRef(new VideoToEmotion()).current;  // Video sensor instance\n    const videoElementRef = useRef(null);  // Reference to the video element\n\n    // Function to start emotion detection and video stream\n    const startEmoDetection = useCallback(async () => {\n        if (!videoElementRef.current) {\n            console.error(\"Video element not provided.\");\n            return;\n        }\n\n        try {\n            // Initialize video sensor with video element and start video stream\n            videoToEmotion.initVideo(videoElementRef.current);\n            await videoToEmotion.startVideoStream();\n            setEmotionState((prev) => ({ ...prev, status: 'detecting' }));\n\n            // Start continuous emotion detection\n            videoToEmotion.startContinuousDetection((emotions) => {\n                const emotionIntensities = {\n                    joy: emotions.happy || 0,\n                    anger: emotions.angry || 0,\n                    disgust: emotions.disgusted || 0,\n                    fear: emotions.fearful || 0,\n                    sadness: emotions.sad || 0,\n                    surprise: emotions.surprised || 0\n                };\n                const topEmotion = Object.keys(emotionIntensities).reduce((a, b) => emotionIntensities[a] > emotionIntensities[b] ? a : b);\n                setEmotionState({\n                    detectedEmotion: topEmotion,\n                    emotionIntensities,\n                    status: 'detecting'\n                });\n            });\n        } catch (error) {\n            console.error('Error starting emotion detection:', error);\n        }\n    }, [videoToEmotion]);\n\n    // Function to stop emotion detection and video stream\n    const stopEmoDetection = useCallback(() => {\n        videoToEmotion.stopDetection();  // Stop emotion detection\n        videoToEmotion.stopVideoStream();  // Stop video stream\n        setEmotionState({ detectedEmotion: null, status: 'stopped', emotionIntensities: {} });\n    }, [videoToEmotion]);\n\n    // Return emotion state and control functions\n    return {\n        emotionState,\n        startEmoDetection,\n        stopEmoDetection,\n        videoElementRef,  // Reference to be attached to video element\n    };\n};\n\nexport default useEmo;","import React, { useState, useEffect } from 'react';\nimport { Box, IconButton } from '@chakra-ui/react';\nimport { ChevronUpIcon, ChevronDownIcon } from '@chakra-ui/icons';\n\nconst DraggableVideoBox = ({ videoElementRef, emotionState }) => {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [dragging, setDragging] = useState(false);\n  const [collapsed, setCollapsed] = useState(false);\n\n  // Handle dragging behavior\n  const handleMouseDown = (event) => {\n    setDragging(true);\n  };\n\n  const handleMouseMove = (event) => {\n    if (dragging) {\n      const x = event.clientX - event.target.offsetWidth / 2;\n      const y = event.clientY - event.target.offsetHeight / 2;\n      setPosition({ x, y });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setDragging(false);\n\n    // Snap to corner logic: bottom-left or bottom-right based on position\n    const windowWidth = window.innerWidth;\n    const newX = position.x < windowWidth / 2 ? 10 : windowWidth - event.target.offsetWidth - 10;\n    const newY = window.innerHeight - event.target.offsetHeight - 10;\n\n    setPosition({ x: newX, y: newY });\n  };\n\n  // Toggle collapse state\n  const toggleCollapse = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <Box\n      position=\"fixed\"\n      width={collapsed ? '100px' : '300px'}\n      height={collapsed ? '50px' : '200px'}\n      cursor={collapsed ? 'default' : 'move'}\n      onMouseDown={!collapsed ? handleMouseDown : null}\n      onMouseMove={!collapsed ? handleMouseMove : null}\n      onMouseUp={!collapsed ? handleMouseUp : null}\n      style={{\n        left: `${position.x}px`,\n        top: `${position.y}px`,\n        zIndex: 1000,\n      }}\n      border=\"2px solid gray\"\n      borderRadius=\"10px\"\n      overflow=\"hidden\"\n      boxShadow=\"lg\"\n      bg=\"gray.900\"\n    >\n      <Box position=\"absolute\" top=\"0\" right=\"0\">\n        <IconButton\n          icon={collapsed ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          size=\"sm\"\n          onClick={toggleCollapse}\n          aria-label=\"Toggle collapse\"\n        />\n      </Box>\n\n      {!collapsed && (\n        <>\n          <video ref={videoElementRef} autoPlay muted style={{ width: '100%', height: '100%' }} />\n          <Box position=\"absolute\" bottom=\"0\" left=\"0\" p=\"2\" color=\"white\" bg=\"rgba(0, 0, 0, 0.5)\">\n            {emotionState.detectedEmotion && (\n              <div>Detected Emotion: {emotionState.detectedEmotion}</div>\n            )}\n          </Box>\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default DraggableVideoBox;","import React from 'react';\nimport { Radar } from 'react-chartjs-2';\nimport { Box } from '@chakra-ui/react';\nimport {\n    Chart as ChartJS,\n    RadialLinearScale,\n    PointElement,\n    LineElement,\n    Filler,\n    Tooltip,\n    Legend\n} from 'chart.js';\n\nChartJS.register(RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend);\n\nconst EmotionRadarChart = ({ emotionIntensities }) => {\n    const data = {\n        labels: ['Joy', 'Anger', 'Disgust', 'Fear', 'Sadness', 'Surprise'],\n        datasets: [\n            {\n                label: 'Emotion Intensities',\n                data: [\n                    emotionIntensities.joy,\n                    emotionIntensities.anger,\n                    emotionIntensities.disgust,\n                    emotionIntensities.fear,\n                    emotionIntensities.sadness,\n                    emotionIntensities.surprise\n                ],\n                backgroundColor: 'rgba(34, 202, 236, 0.2)',\n                borderColor: 'rgba(34, 202, 236, 1)',\n                borderWidth: 2\n            }\n        ]\n    };\n\n    const options = {\n        scale: {\n            ticks: { beginAtZero: true, max: 1 },\n            angleLines: { display: true }\n        }\n    };\n\n    return (\n        <Box width=\"400px\" height=\"400px\" p={4}>\n            <Radar data={data} options={options} />\n        </Box>\n    );\n};\n\nexport default EmotionRadarChart;","import React, { useEffect, useRef } from 'react';\nimport useEmo from '../hooks/useEmo';\nimport DraggableVideoBox from './DraggableVideoBox';\nimport EmotionRadarChart from './EmotionRadarChart';\nimport GameText from './GameText';\n\nconst EmotionDetection = ({ onEmotionStateChange }) => {\n    const { emotionState, startEmoDetection, stopEmoDetection, videoElementRef } = useEmo();\n\n    // Start detection when component mounts and clean up when unmounting\n    useEffect(() => {\n        startEmoDetection();\n\n        return () => {\n            stopEmoDetection();\n        };\n    }, [startEmoDetection, stopEmoDetection]);\n\n    // Pass emotionState to parent via callback\n    useEffect(() => {\n        if (onEmotionStateChange) {\n            onEmotionStateChange(emotionState);  // Provide the updated emotion state\n        }\n    }, [emotionState, onEmotionStateChange]);\n\n    return (\n        <div>\n            <DraggableVideoBox videoElementRef={videoElementRef} emotionState={emotionState} />\n            <EmotionRadarChart emotionIntensities={emotionState.emotionIntensities} />\n            <GameText text={emotionState.detectedEmotion || ''} />\n        </div>\n    );\n};\n\nexport default EmotionDetection;","import ReactDOMClient from 'react-dom/client';\nimport React from 'react';\nimport EmotionDetection from '../components/EmotionDetection';\n\nlet root = null;\n\nexport const start = (animationManager, settings, containerRef) => {\n  if (!containerRef || !containerRef.current) {\n    console.error('Container reference not provided or invalid. Unable to start FaceDetectionApp.');\n    return; // Exit the function gracefully\n  }\n\n  if (!root) {\n    root = ReactDOMClient.createRoot(containerRef.current);\n  }\n\n  root.render(<EmotionDetection animationManager={animationManager} settings={settings} />);\n};\n\nexport const stop = () => {\n  if (root) {\n    root.unmount(); // Unmount the component using the root\n    root = null; // Reset root to null\n  }\n};"],"names":["VideoToEmotion","constructor","this","videoElement","isProcessing","intervalId","initVideo","loadModels","MODEL_URL","process","faceapi","tinyFaceDetector","loadFromUri","faceLandmark68Net","faceExpressionNet","faceRecognitionNet","console","log","error","Error","startVideoStream","stream","navigator","mediaDevices","getUserMedia","video","srcObject","startContinuousDetection","onEmotionDetectedCallback","warn","setInterval","async","detections","withFaceLandmarks","withFaceExpressions","length","emotions","expressions","stopDetection","clearInterval","stopVideoStream","getTracks","forEach","track","stop","useEmo","emotionState","setEmotionState","useState","detectedEmotion","emotionIntensities","joy","anger","disgust","fear","sadness","surprise","status","videoToEmotion","useRef","current","videoElementRef","startEmoDetection","useCallback","prev","happy","angry","disgusted","fearful","sad","surprised","topEmotion","Object","keys","reduce","a","b","stopEmoDetection","_ref","position","setPosition","x","y","dragging","setDragging","collapsed","setCollapsed","_jsxs","Box","width","height","cursor","onMouseDown","event","onMouseMove","clientX","target","offsetWidth","clientY","offsetHeight","onMouseUp","handleMouseUp","windowWidth","window","innerWidth","newX","newY","innerHeight","style","left","concat","top","zIndex","border","borderRadius","overflow","boxShadow","bg","children","_jsx","right","IconButton","icon","ChevronUpIcon","ChevronDownIcon","size","onClick","toggleCollapse","_Fragment","ref","autoPlay","muted","bottom","p","color","ChartJS","register","RadialLinearScale","PointElement","LineElement","Filler","Tooltip","Legend","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","Radar","options","scale","ticks","beginAtZero","max","angleLines","display","onEmotionStateChange","useEffect","DraggableVideoBox","EmotionRadarChart","GameText","text","root","start","animationManager","settings","containerRef","ReactDOMClient","render","EmotionDetection","unmount"],"sourceRoot":""}