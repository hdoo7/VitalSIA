{"version":3,"file":"static/js/624.d80054b9.chunk.js","mappings":"0QAWA,IAAIA,EAAO,KAEX,MAAMC,EAAUC,IAA2B,IAA1B,iBAAEC,GAAkBD,EACjC,MAAOE,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,IAC9CC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,MAC3CG,GAAoBC,EAAAA,EAAAA,QAAON,GAC3BO,GAAQC,EAAAA,EAAAA,KAERC,GAAYC,EAAAA,EAAAA,UAAQ,IAAM,CAC5B,CAAEC,OAAQ,UAAWC,QAAS,SAC9B,CAAED,OAAQ,QAASC,QAAS,aAC5B,CAAED,OAAQ,OAAQC,QAAS,OAC3B,CAAED,OAAQ,MAAOC,QAAS,QAC1B,CAAED,OAAQ,SAAUC,QAAS,WAC9B,KAGHC,EAAAA,EAAAA,YAAU,KACNR,EAAkBS,QAAUd,CAAc,GAC3C,CAACA,IAGJ,MAAMe,GAAuBL,EAAAA,EAAAA,UAAQ,IAC1B,YACH,IAAK,IAAIM,KAAYP,OACZ,iBAALQ,OAAuBD,EAASL,OAAM,sBAGrC,kDAALM,OAAqDZ,EAAkBS,QAAO,4BAAAG,OAAwBR,EAAUS,OAAM,gCAC1H,GACD,CAACT,IAGEU,GAA2BT,EAAAA,EAAAA,UAAQ,IAC9B,YACH,IAAK,IAAIM,KAAYP,EAAW,SAEbW,cAAcC,SAASL,EAASJ,QAAQQ,gBACnDnB,GAAmBqB,GAASA,EAAO,SAC7B,iBAED,0CAALL,OAA6CD,EAASJ,QAE9D,CACJ,GACD,CAACH,KAEGc,EAAmBC,IAAwBtB,EAAAA,EAAAA,UAAS,CACvDuB,OAAQ,OACRC,gBAAiB,KACjBC,aAAc,OAGZC,GAActB,EAAAA,EAAAA,QAAO,IAAIuB,EAAAA,EAAY,cAAcf,QACnDgB,GAAexB,EAAAA,EAAAA,QAAOyB,EAAAA,EAAaC,YAAYjC,IAAmBe,QAClEmB,GAAsB3B,EAAAA,EAAAA,QAAO,IAAI4B,EAAAA,EAAoB,IAAMN,EAAaE,IAAehB,SAG7FqB,EAAAA,EAAAA,GAAapC,EAAkBI,GAE/B,MAAM,kBAAEiC,EAAiB,iBAAEC,IAAqBC,EAAAA,EAAAA,GAC5CV,EACAE,EACAG,EACAlB,EACAI,GA+BJ,OA5BAN,EAAAA,EAAAA,YAAU,KACNiB,EAAaS,gBAAgB,sBAAmBC,MAAK,KACjDJ,GAAmB,IAGhB,KACHC,GAAkB,IAEvB,CAACD,EAAmBC,EAAkBP,KAEzCjB,EAAAA,EAAAA,YAAU,KAC2B,aAA7BU,EAAkBE,OAClBlB,EAAM,CACFkC,MAAO,gBACPC,YAAa,8BACbjB,OAAQ,OACRkB,SAAU,MAEsB,YAA7BpB,EAAkBE,QACzBlB,EAAM,CACFkC,MAAO,WACPC,YAAanB,EAAkBI,aAC/BF,OAAQ,UACRkB,SAAU,KAElB,GACD,CAACpB,EAAkBE,OAAQlB,KAG1BqC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,CAACC,qBAAsB5C,IAAmB,MAC3D0C,EAAAA,EAAAA,KAACG,EAAAA,EAAqB,CAACxB,OAAQF,EAAkBE,UACjDqB,EAAAA,EAAAA,KAAA,OAAAD,UACID,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,oBAAkB7C,SAExB,EAKDkD,EAAQA,CAACnD,EAAkBoD,EAAaC,KAC5CA,GAAiBA,EAAatC,SAK9BlB,IACDA,GAAOyD,EAAAA,EAAAA,YAAWD,EAAatC,UAGnClB,EAAK0D,QAAOR,EAAAA,EAAAA,KAACjD,EAAO,CAACE,iBAAkBA,MARnCwD,QAAQC,MAAM,8BAQ0C,EAGnDC,EAAOA,KAChBF,QAAQG,IAAI,sCACR9D,IACAA,EAAK+D,UACL/D,EAAO,KACX,C","sources":["modules/emoFrenchQuiz.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { useToast } from '@chakra-ui/react';\nimport { createRoot } from 'react-dom/client';\nimport useConvo from './../hooks/useConvo';  // Custom hook\nimport useMirroring from './../hooks/useMirroring';  // Continuous emotion mirroring hook\nimport AudioToText from './../VISOS/perception/audio/AudioToText';\nimport VoiceManager from './../VISOS/action/verbalizers/VoiceManager';\nimport ConversationManager from './../VISOS/cognition/ConversationManager';\nimport TrafficLightIndicator from '../components/TrafficLightIndicator';\nimport EmotionDetection from '../components/EmotionDetection';  // Emotion detection component\n\nlet root = null;\n\nconst QuizApp = ({ animationManager }) => {\n    const [correctAnswers, setCorrectAnswers] = useState(0); // Track correct answers\n    const [emotionState, setEmotionState] = useState(null);  // Track emotionState for mirroring\n    const correctAnswersRef = useRef(correctAnswers); // Ref to store correctAnswers value\n    const toast = useToast();\n\n    const questions = useMemo(() => [\n        { french: \"Bonjour\", english: \"Hello\" },\n        { french: \"Merci\", english: \"Thank you\" },\n        { french: \"Chat\", english: \"Cat\" },\n        { french: \"Tet\", english: \"Head\" },\n        { french: \"Maison\", english: \"House\" },\n    ], []);\n\n    // Update correctAnswersRef whenever correctAnswers state changes\n    useEffect(() => {\n        correctAnswersRef.current = correctAnswers; // Keep the ref in sync with the state\n    }, [correctAnswers]);\n\n    // Memoize the textToSpeakGenerator for questions\n    const textToSpeakGenerator = useMemo(() => {\n        return function* () {\n            for (let question of questions) {\n                yield `Que veut dire ${question.french} en anglais ?`;\n            }\n            // Final message after all questions have been answered using ref to get the latest value\n            yield `Vous avez terminé le quiz! Vous avez obtenu ${correctAnswersRef.current} bonnes réponses sur ${questions.length}. Merci d'avoir participé!`;\n        };\n    }, [questions]);\n\n    // Memoize the transcribedTextGenerator for checking answers\n    const transcribedTextGenerator = useMemo(() => {\n        return function* () {\n            for (let question of questions) {\n                const userAnswer = yield;  // Get user input\n                if (userAnswer.toLowerCase().includes(question.english.toLowerCase())) {\n                    setCorrectAnswers((prev) => prev + 1); // Increment correct answers\n                    yield \"Correct!\";\n                } else {\n                    yield `Incorrect. La réponse correcte est: ${question.english}`;\n                }\n            }\n        };\n    }, [questions]);\n\n    const [conversationState, setConversationState] = useState({\n        status: 'idle', // Possible statuses: 'idle', 'listening', 'thinking', 'talking'\n        transcribedText: null, // User's transcribed input\n        speakingText: null, // Text currently being spoken\n    });\n\n    const audioToText = useRef(new AudioToText('webspeech')).current;\n    const voiceManager = useRef(VoiceManager.getInstance(animationManager)).current;\n    const conversationManager = useRef(new ConversationManager(1000, audioToText, voiceManager)).current;\n\n    // Integrate Emotion Mirroring Hook\n    useMirroring(animationManager, emotionState);  // Use continuous emotion mirroring\n\n    const { startConversation, stopConversation } = useConvo(\n        audioToText,\n        voiceManager,\n        conversationManager,\n        textToSpeakGenerator,\n        transcribedTextGenerator\n    );\n\n    useEffect(() => {\n        voiceManager.findAndSetVoice('Google français').then(() => {\n            startConversation();\n        });\n\n        return () => {\n            stopConversation();\n        };\n    }, [startConversation, stopConversation, voiceManager]);\n\n    useEffect(() => {\n        if (conversationState.status === 'thinking') {\n            toast({\n                title: 'Processing...',\n                description: 'Processing your response...',\n                status: 'info',\n                duration: 2000,\n            });\n        } else if (conversationState.status === 'talking') {\n            toast({\n                title: 'Response',\n                description: conversationState.speakingText,\n                status: 'success',\n                duration: 4000,\n            });\n        }\n    }, [conversationState.status, toast]);\n\n    return (\n        <div>\n            <EmotionDetection onEmotionStateChange={setEmotionState} />  {/* Emotion Detection */}\n            <TrafficLightIndicator status={conversationState.status} />\n            <div>\n                <h2>Correct Answers: {correctAnswers}</h2>\n            </div>\n        </div>\n    );\n};\n\n// Start and Stop the quiz functions\nexport const start = (animationManager, appSettings, containerRef) => {\n    if (!containerRef || !containerRef.current) {\n        console.error('Invalid container reference');\n        return;\n    }\n\n    if (!root) {\n        root = createRoot(containerRef.current);\n    }\n\n    root.render(<QuizApp animationManager={animationManager} />);\n};\n\nexport const stop = () => {\n    console.log(\"Stopping French Vocabulary Quiz...\");\n    if (root) {\n        root.unmount();\n        root = null;\n    }\n};"],"names":["root","QuizApp","_ref","animationManager","correctAnswers","setCorrectAnswers","useState","emotionState","setEmotionState","correctAnswersRef","useRef","toast","useToast","questions","useMemo","french","english","useEffect","current","textToSpeakGenerator","question","concat","length","transcribedTextGenerator","toLowerCase","includes","prev","conversationState","setConversationState","status","transcribedText","speakingText","audioToText","AudioToText","voiceManager","VoiceManager","getInstance","conversationManager","ConversationManager","useMirroring","startConversation","stopConversation","useConvo","findAndSetVoice","then","title","description","duration","_jsxs","children","_jsx","EmotionDetection","onEmotionStateChange","TrafficLightIndicator","start","appSettings","containerRef","createRoot","render","console","error","stop","log","unmount"],"sourceRoot":""}