{"mappings":"AAAA,MAAM,aAAa;AACnB,MAAM,iBAAiB;AAEvB,iDAAiD;AACjD,KAAK,gBAAgB,CAAC,WAAW,CAAA;IAC7B,MAAM,SAAS,CACX,OAAO,IAAI,CAAC,YACP,IAAI,CAAC,CAAA;QACF,QAAQ,GAAG,CAAC;QACZ,OAAO,MAAM,GAAG,CAAC;IACrB,GACC,KAAK,CAAC,CAAA,QAAS,QAAQ,KAAK,CAAC,0DAA0D;AAEpG;AAEA,6DAA6D;AAC7D,KAAK,gBAAgB,CAAC,SAAS,CAAA;IAC3B,IAAI,MAAM,OAAO,CAAC,GAAG,KAAK,gBACtB,MAAM,WAAW,CACb,OAAO,KAAK,CAAC,MAAM,OAAO,EACrB,IAAI,CAAC,CAAA;QACF,IAAI,gBAAgB;YAChB,QAAQ,GAAG,CAAC;YACZ,OAAO;QACX;QACA,OAAO,MAAM,MAAM,OAAO,EAAE,IAAI,CAAC,CAAA;YAC7B,oCAAoC;YACpC,IAAI,CAAC,YAAY,SAAS,MAAM,KAAK,OAAO,SAAS,IAAI,KAAK,SAAS;gBACnE,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACX;YACA,MAAM,kBAAkB,SAAS,KAAK;YACtC,OAAO,IAAI,CAAC,YACP,IAAI,CAAC,CAAA;gBACF,MAAM,GAAG,CAAC,MAAM,OAAO,EAAE;YAC7B;YACJ,OAAO;QACX;IACJ;SAEL;QACH,QAAQ,GAAG,CAAC;QACZ,OAAO,MAAM,MAAM,OAAO;IAC9B;AACJ;AAEA,uCAAuC;AACvC,KAAK,gBAAgB,CAAC,YAAY,CAAA;IAC9B,MAAM,iBAAiB;QAAC;KAAW;IACnC,MAAM,SAAS,CACX,OAAO,IAAI,GAAG,IAAI,CAAC,CAAA;QACf,OAAO,QAAQ,GAAG,CACd,WAAW,GAAG,CAAC,CAAA;YACX,IAAI,eAAe,OAAO,CAAC,eAAe,IACtC,OAAO,OAAO,MAAM,CAAC;QAE7B;IAER;AAER","sources":["src/unityCacheServiceWorker.js"],"sourcesContent":["const CACHE_NAME = 'unity-assets-cache-v1';\nconst UNITY_FILE_URL = 'https://evalibre.blob.core.windows.net/evalibre/001_FEMALE_CAU_2019_05_06/webgl.data.unityweb';\n\n// Install event - cache the specified Unity file\nself.addEventListener('install', event => {\n    event.waitUntil(\n        caches.open(CACHE_NAME)\n            .then(cache => {\n                console.log('[Service Worker] Caching Unity file');\n                return cache.add(UNITY_FILE_URL);\n            })\n            .catch(error => console.error('[Service Worker] Failed to cache Unity file on install', error))\n    );\n});\n\n// Fetch event - serve files from cache or fetch from network\nself.addEventListener('fetch', event => {\n    if (event.request.url === UNITY_FILE_URL) {\n        event.respondWith(\n            caches.match(event.request)\n                .then(cachedResponse => {\n                    if (cachedResponse) {\n                        console.log('[Service Worker] Found Unity file in cache');\n                        return cachedResponse;\n                    }\n                    return fetch(event.request).then(response => {\n                        // Check if the fetch was successful\n                        if (!response || response.status !== 200 || response.type !== 'basic') {\n                            console.log('[Service Worker] Fetch from network failed or response not valid');\n                            return response;\n                        }\n                        const responseToCache = response.clone();\n                        caches.open(CACHE_NAME)\n                            .then(cache => {\n                                cache.put(event.request, responseToCache);\n                            });\n                        return response;\n                    });\n                })\n        );\n    } else {\n        console.log('[Service Worker] Fetch event bypassed for non-target URL');\n        return fetch(event.request);\n    }\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', event => {\n    const cacheWhitelist = [CACHE_NAME];\n    event.waitUntil(\n        caches.keys().then(cacheNames => {\n            return Promise.all(\n                cacheNames.map(cacheName => {\n                    if (cacheWhitelist.indexOf(cacheName) === -1) {\n                        return caches.delete(cacheName);\n                    }\n                })\n            );\n        })\n    );\n});\n"],"names":[],"version":3,"file":"unityCacheServiceWorker.js.map","sourceRoot":"/__parcel_source_root/"}